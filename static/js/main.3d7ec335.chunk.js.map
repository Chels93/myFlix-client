{"version":3,"sources":["components/movie-card/movie-card.jsx","components/movie-view/movie-view.jsx","components/login-view/login-view.jsx","components/navigation-bar/navigation-bar.jsx","components/profile-view/deregister-user.jsx","components/profile-view/update-user.jsx","components/profile-view/user-info.jsx","components/profile-view/favorite-movies.jsx","components/profile-view/profile-view.jsx","components/main-view/main-view.jsx","index.jsx"],"names":["MovieCard","_ref","movie","fav","onMovieClick","onAddToFavorites","onRemoveFromFavorites","navigate","useNavigate","isFavorite","setIsFavorite","useState","_jsxs","Card","className","children","_jsx","Img","variant","src","imagePath","alt","concat","title","Body","Title","Button","onClick","handleSeeMore","_id","console","error","event","preventDefault","MovieView","movies","movieId","useParams","setMovie","favorite","setFavorite","useEffect","foundMovie","find","synopsis","year","genre","name","description","director","bio","birthYear","deathYear","handleBackClick","handleFavoriteClick","LoginView","onLoggedIn","onSignedUp","username","setUsername","password","setPassword","email","setEmail","birthdate","setBirthdate","isLogin","setIsLogin","Form","onSubmit","async","data","_objectSpread","url","response","fetch","method","headers","body","JSON","stringify","ok","Error","responseData","json","localStorage","setItem","user","token","alert","message","Group","controlId","Label","Control","type","value","onChange","e","target","required","minLength","undefined","_Fragment","toggleForm","NavigationBar","onLoggedOut","isNavbarOpen","setIsNavbarOpen","navbarRef","useRef","handleClickOutside","current","contains","document","addEventListener","removeEventListener","Navbar","bg","expand","ref","onToggle","expanded","Container","Brand","as","Link","to","Toggle","Collapse","id","Nav","DeregisterUser","handleDeregisterClick","Authorization","then","text","removeItem","window","location","reload","catch","UpdateUser","onUserUpdate","getItem","updatedUser","log","status","placeholder","UserInfo","formattedBirthdate","Date","toLocaleDateString","FavoriteMovies","favoriteMovies","setFavoriteMovies","userdata","fetchFavoriteMovies","Array","isArray","filteredMovies","filter","includes","Row","length","map","Col","xs","sm","md","lg","handleMovieClick","onFavoriteClick","ProfileView","setUser","getSimilarity","a","b","matrix","from","fill","i","j","Math","min","max","MainView","storedToken","setToken","setMovies","selectedMovie","setSelectedMovie","searchQuery","setSearchQuery","suggestions","setSuggestions","selectedGenre","setSelectedGenre","selectedDirector","setSelectedDirector","genres","setGenres","directors","setDirectors","uniqueGenres","Set","uniqueDirectors","seen","isDuplicate","has","add","getUniqueDirectors","lowerSearchQuery","toLowerCase","filteredSuggestions","similarity","sort","handleAddToFavorites","prevMovies","handleRemoveFromFavorites","searchFilteredMovies","BrowserRouter","Routes","Route","path","element","Navigate","style","border","onBackClick","replace","index","App","container","querySelector","createRoot","render"],"mappings":"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","file":"static/js/main.3d7ec335.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, Button } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./movie-card.scss\";\nimport \"../profile-view/profile-view.scss\";\n\nconst MovieCard = ({\n  movie,\n  fav,\n  onMovieClick,\n  onAddToFavorites,\n  onRemoveFromFavorites,\n}) => {\n  const navigate = useNavigate();\n  const [isFavorite, setIsFavorite] = useState(fav);\n\n  const handleSeeMore = () => {\n    navigate(`/movies/${movie._id}`);\n    if (typeof onMovieClick === 'function') {\n      onMovieClick(movie);\n    } else {\n      console.error(\"onMovieClick is not a function\");\n    }\n  };\n\n  const handleFavoriteClick = (event) => {\n    event.preventDefault();\n    if (isFavorite) {\n      onRemoveFromFavorites(movie._id);\n      setIsFavorite(false);\n    } else {\n      onAddToFavorites(movie._id);\n      setIsFavorite(true);\n    }\n  };\n\n  return (\n    <Card className=\"movie-card\">\n      <div className=\"card-img-container\">\n        <Card.Img\n          className=\"card-img\"\n          variant=\"top\"\n          src={movie.imagePath}\n          alt={`${movie.title} poster`}\n        />\n      </div>\n      <Card.Body className=\"card-body\">\n        <Card.Title className=\"card-title\">{movie.title}</Card.Title>\n        <Button className=\"see-more\" onClick={handleSeeMore} variant=\"primary\">\n          See More\n        </Button>\n        <Button\n          className=\"favorite-button\"\n          variant={isFavorite ? \"danger\" : \"outline-danger\"}\n          onClick={handleFavoriteClick}\n        >\n          {isFavorite ? \"Remove from Favorites\" : \"Add to Favorites\"}\n        </Button>\n      </Card.Body>\n    </Card>\n  );\n};\n\nMovieCard.propTypes = {\n  fav: PropTypes.bool.isRequired,\n  movie: PropTypes.shape({\n    _id: PropTypes.string.isRequired,\n    imagePath: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    synopsis: PropTypes.string.isRequired,\n    year: PropTypes.string.isRequired,\n    genre: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      description: PropTypes.string.isRequired,\n    }).isRequired,\n    director: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      bio: PropTypes.string.isRequired,\n      birthYear: PropTypes.string,\n      deathYear: PropTypes.string,\n    }).isRequired,\n  }).isRequired,\n  onMovieClick: PropTypes.func,\n  onAddToFavorites: PropTypes.func.isRequired,\n  onRemoveFromFavorites: PropTypes.func.isRequired,\n};\n\nexport default MovieCard;","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"react-bootstrap/Button\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport \"./movie-view.scss\";\nimport \"../movie-card/movie-card.scss\";\n\nexport const MovieView = ({\n  movies,\n  onAddToFavorites,\n  onRemoveFromFavorites,\n  isFavorite,\n}) => {\n  const { movieId } = useParams(); // Get the movieId from the URL\n  const navigate = useNavigate();\n  const [movie, setMovie] = useState(null);\n  const [favorite, setFavorite] = useState(isFavorite);\n\n  useEffect(() => {\n    const foundMovie = movies.find((movie) => movie._id === movieId);\n    if (foundMovie) {\n      setMovie(foundMovie);\n      setFavorite(foundMovie.isFavorite || false); // Initialize favorite state\n    } else {\n      // Handle case where movie is not found\n      console.error(\"Movie not found:\", movieId);\n    }\n  }, [movieId, movies]);\n\n  if (!movie) {\n    return <div>Loading...</div>;\n  }\n\n  const handleBackClick = () => {\n    navigate(\"/\");\n  };\n\n  const handleFavoriteClick = () => {\n    if (favorite) {\n      onRemoveFromFavorites(movie._id);\n      setFavorite(false);\n    } else {\n      onAddToFavorites(movie._id);\n      setFavorite(true);\n    }\n  };\n\n  return (\n    <div className=\"movie-view\">\n      <div className=\"image-container\">\n        <img src={movie.imagePath} alt={`${movie.title} poster`} />\n      </div>\n      <div className=\"movie-details\">\n        <div>\n          <span className=\"movie-title\">Title: </span>\n          <span>{movie.title}</span>\n        </div>\n        <div>\n          <span className=\"movie-title\">Synopsis: </span>\n          <span>{movie.synopsis}</span>\n        </div>\n        <div>\n          <span className=\"movie-title\">Release Year: </span>\n          <span>{movie.year}</span>\n        </div>\n        <div>\n          <span className=\"movie-title\">Genre: </span>\n          <span>{movie.genre.name}</span>\n        </div>\n        <div>\n          <span className=\"movie-title\">Genre Description: </span>\n          <span>{movie.genre.description}</span>\n        </div>\n        <div>\n          <span className=\"movie-title\">Director: </span>\n          <span>{movie.director.name}</span>\n        </div>\n        <div>\n          <span className=\"movie-title\">Director Bio: </span>\n          <span>{movie.director.bio}</span>\n        </div>\n        <div>\n          <span className=\"movie-title\">Director Birthyear: </span>\n          <span>{movie.director.birthYear}</span>\n        </div>\n        <div>\n          <span className=\"movie-title\">Director Deathyear: </span>\n          <span>{movie.director.deathYear}</span>\n        </div>\n      </div>\n      <div className=\"buttons-container\">\n        <Button onClick={handleBackClick} className=\"back-button\">\n          Back\n        </Button>\n        <Button\n          onClick={handleFavoriteClick}\n          className={`favorites-button ${favorite ? \"favorited\" : \"\"}`}\n        >\n          {favorite ? \"Remove from Favorites\" : \"Add to Favorites\"}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nMovieView.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      _id: PropTypes.string.isRequired,\n      imagePath: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      synopsis: PropTypes.string.isRequired,\n      year: PropTypes.string.isRequired,\n      genre: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        description: PropTypes.string.isRequired,\n      }).isRequired,\n      director: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        bio: PropTypes.string.isRequired,\n        birthYear: PropTypes.string,\n        deathYear: PropTypes.string,\n      }).isRequired,\n      isFavorite: PropTypes.bool, // Add isFavorite to match the state\n    })\n  ).isRequired,\n  onAddToFavorites: PropTypes.func.isRequired,\n  onRemoveFromFavorites: PropTypes.func.isRequired,\n  isFavorite: PropTypes.bool,\n};","import { useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport \"./login-view.scss\";\n\nexport const LoginView = ({ onLoggedIn, onSignedUp }) => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [birthdate, setBirthdate] = useState(\"\");\n  const [isLogin, setIsLogin] = useState(true);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    const data = {\n      username,\n      password,\n      ...(email && { email }),\n      ...(birthdate && { birthdate }),\n    };\n\n    const url = isLogin\n      ? \"https://mymoviesdb-6c5720b5bef1.herokuapp.com/login\"\n      : \"https://mymoviesdb-6c5720b5bef1.herokuapp.com/users\";\n\n    try {\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error(isLogin ? \"Login failed\" : \"Signup failed\");\n      }\n\n      const responseData = await response.json();\n      if (isLogin) {\n        localStorage.setItem(\"user\", JSON.stringify(responseData.user));\n        localStorage.setItem(\"token\", responseData.token);\n        onLoggedIn(responseData.user, responseData.token);\n      } else {\n        alert(\"Sign-up successful! Please log in.\");\n        setIsLogin(true);\n      }\n    } catch (error) {\n      alert(`Something went wrong: ${error.message}`);\n    }\n  };\n\n  const toggleForm = () => {\n    setIsLogin(!isLogin);\n    setUsername(\"\");\n    setPassword(\"\");\n    setEmail(\"\");\n    setBirthdate(\"\");\n  };\n\n  return (\n    <div className=\"login-container\">\n      <div className=\"form-container\">\n        <div className=\"navbar-brand\">CineVault</div>\n        <Form onSubmit={handleSubmit}>\n          <Form.Group controlId=\"formUsername\">\n            <Form.Label>Username:</Form.Label>\n            <Form.Control\n              type=\"text\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              required\n              minLength=\"3\"\n            />\n          </Form.Group>\n\n          <Form.Group controlId=\"formPassword\" className=\"password-group\">\n            <Form.Label>Password:</Form.Label>\n            <Form.Control\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              required\n              minLength={isLogin ? \"6\" : undefined}\n            />\n          </Form.Group>\n\n          {!isLogin && (\n            <>\n              <Form.Group controlId=\"formEmail\">\n                <Form.Label>Email:</Form.Label>\n                <Form.Control\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                />\n              </Form.Group>\n\n              <Form.Group controlId=\"formBirthday\">\n                <Form.Label>Birthday:</Form.Label>\n                <Form.Control\n                  type=\"date\"\n                  value={birthdate}\n                  onChange={(e) => setBirthdate(e.target.value)}\n                  required\n                />\n              </Form.Group>\n            </>\n          )}\n\n          <Button variant=\"primary\" type=\"submit\" className=\"submit-button\">\n            {isLogin ? \"Login\" : \"Sign Up\"}\n          </Button>\n        </Form>\n        <Button variant=\"link\" onClick={toggleForm} className=\"toggle-button\">\n          {isLogin\n            ? \"Don't have an account? Sign up.\"\n            : \"Already have an account? Login.\"}\n        </Button>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { Navbar, Container, Nav } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport \"./navigation-bar.scss\";\n\nexport const NavigationBar = ({ user, onLoggedOut }) => {\n  const [isNavbarOpen, setIsNavbarOpen] = useState(false);\n  const navbarRef = useRef(null);\n\n  const handleToggle = () => setIsNavbarOpen(!isNavbarOpen);\n\n  const handleClickOutside = (event) => {\n    if (navbarRef.current && !navbarRef.current.contains(event.target)) {\n      setIsNavbarOpen(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n\n  return (\n    <Navbar\n      bg=\"light\"\n      expand=\"lg\"\n      ref={navbarRef}\n      onToggle={() => setIsNavbarOpen(!isNavbarOpen)}\n      expanded={isNavbarOpen}\n    >\n      <Container>\n        <Navbar.Brand as={Link} to=\"/\" className=\"navbar-brand\">\n          CineVault\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav>\n            {user && (\n              <>\n                <Nav.Link\n                  as={Link}\n                  to=\"/\"\n                  className=\"nav-home\"\n                  onClick={() => setIsNavbarOpen(false)}\n                >\n                  Home\n                </Nav.Link>\n                <Nav.Link\n                  as={Link}\n                  to=\"/profile\"\n                  className=\"nav-profile\"\n                  onClick={() => setIsNavbarOpen(false)}\n                >\n                  Profile\n                </Nav.Link>\n                <Nav.Link\n                  onClick={() => {\n                    onLoggedOut();\n                    setIsNavbarOpen(false);\n                  }}\n                  className=\"nav-logout\"\n                >\n                  Logout\n                </Nav.Link>\n              </>\n            )}\n          </Nav>\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n  );\n};\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport \"./profile-view.scss\";\n\nexport const DeregisterUser = ({ user, token }) => {\n  const handleDeregisterClick = () => {\n    if (!user || !user.username) {\n      console.error(\"User object or username is missing\");\n      return;\n    }\n    fetch(\n      `https://mymoviesdb-6c5720b5bef1.herokuapp.com/users/${user.username}`,\n      {\n        method: \"DELETE\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    )\n      .then((response) => {\n        if (!response.ok) {\n          return response.text().then((text) => {\n            console.error(\"Error response text: \", text);\n            throw new Error(text || \"Failed to deregister user\");\n          });\n        }\n        return response.text();\n      })\n      .then((data) => {\n        alert(\"User deregistered successfully! \" + data);\n        localStorage.removeItem(\"token\");\n        localStorage.removeItem(\"user\");\n        window.location.reload();\n      })\n      .catch((error) => {\n        console.error(\"Error deregistering user: \", error);\n        alert(\"Failed to deregister user. Please try again.\");\n      });\n  };\n\n  return (\n    <div>\n      <Button onClick={handleDeregisterClick} className=\"btn-secondary\">\n        Deregister User\n      </Button>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Card, Form, Button } from \"react-bootstrap\";\nimport { DeregisterUser } from \"./deregister-user\";\nimport \"./profile-view.scss\";\n\nconst UpdateUser = ({ user, onUserUpdate }) => {\n  const [username, setUsername] = useState(user.username || \"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(user.email || \"\");\n  const [birthdate, setBirthdate] = useState(user.birthdate || \"\");\n  const token = localStorage.getItem(\"token\");\n\n  const handleUpdate = (event) => {\n    event.preventDefault();\n    const updatedUser = {\n      username: username || user.username,\n      email: email || user.email,\n      birthdate: birthdate || user.birthdate,\n    };\n\n    if (password) {\n      updatedUser.password = password;\n    }\n\n    console.log(\"Updating user with:\", updatedUser);\n\n    fetch(\n      `https://mymoviesdb-6c5720b5bef1.herokuapp.com/users/${user.username}`,\n      {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(updatedUser),\n      }\n    )\n      .then((response) => {\n        console.log(\"Response status:\", response.status);\n        if (!response.ok) {\n          throw new Error(\"Failed to update user.\");\n        }\n        return response.json();\n      })\n      .then((data) => {\n        alert(\"User updated successfully!\");\n        onUserUpdate(data);\n      })\n      .catch((error) => {\n        console.error(\"Error updating user: \", error);\n        alert(`Failed to update user: ${error.message}`);\n      });\n  };\n\n  return (\n    <Card className=\"update-user\">\n      <Card.Body>\n        <Card.Title>Update User Information</Card.Title>\n        <Form className=\"profile-form\" onSubmit={handleUpdate}>\n          <Form.Group className=\"update-header\" controlId=\"formUsername\">\n            <Form.Label className=\"form-header\">Username</Form.Label>\n            <Form.Control\n              className=\"form-input\"\n              type=\"text\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              placeholder=\"Please enter a new username.\"\n            />\n          </Form.Group>\n\n          <Form.Group className=\"update-header\" controlId=\"formPassword\">\n            <Form.Label className=\"form-header\">Password</Form.Label>\n            <Form.Control\n              className=\"form-input\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"Please enter a new password.\"\n            />\n          </Form.Group>\n\n          <Form.Group className=\"update-header\" controlId=\"formEmail\">\n            <Form.Label className=\"form-header\">Email address</Form.Label>\n            <Form.Control\n              className=\"form-input\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"Please enter a new e-mail address.\"\n            />\n          </Form.Group>\n          <Form.Group className=\"update-header\" controlId=\"formBirthdate\">\n            <Form.Label className=\"form-header\">Birthdate</Form.Label>\n            <Form.Control\n              className=\"form-input\"\n              type=\"date\"\n              value={birthdate}\n              onChange={(e) => setBirthdate(e.target.value)}\n            />\n          </Form.Group>\n          <Button className=\"btn-primary\" variant=\"primary\" type=\"submit\">\n            Update\n          </Button>\n          <DeregisterUser user={user} token={token} />\n        </Form>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default UpdateUser;\n","import React from \"react\";\nimport \"./profile-view.scss\";\n\nexport const UserInfo = ({ username, email, birthdate }) => {\n  const formattedBirthdate = new Date(birthdate).toLocaleDateString();\n\n  return (\n    <div className=\"profile-view-container\">\n      <h4 className=\"info-header\">Your Info</h4>\n      <p className=\"info-label\">\n        <span className=\"info-label-text\">Name: </span>\n        <span className=\"info-value\">{username}</span>\n      </p>\n      <p className=\"info-label\">\n        <span className=\"info-label-text\">Email: </span>\n        <span className=\"info-value\">{email}</span>\n      </p>\n      <p className=\"info-label\">\n        <span className=\"info-label-text\">Birthdate: </span>\n        <span className=\"info-value\">{formattedBirthdate}</span>\n      </p>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Container, Row, Col, Card } from \"react-bootstrap\";\nimport MovieCard from \"../movie-card/movie-card\";\nimport \"./profile-view.scss\";\nimport \"../movie-card/movie-card.scss\";\n\nexport const FavoriteMovies = ({\n  movies,\n  user,\n  onAddToFavorites,\n  onRemoveFromFavorites,\n}) => {\n  const [favoriteMovies, setFavoriteMovies] = useState([]);\n  const token = localStorage.getItem(\"token\");\n\n  useEffect(() => {\n    const fetchFavoriteMovies = async () => {\n      if (!user || !user.username) {\n        console.error(\"User or username is undefined.\");\n        return;\n      }\n\n      try {\n        const response = await fetch(\n          `https://mymoviesdb-6c5720b5bef1.herokuapp.com/users/${user.username}`,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n            },\n          }\n        );\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch favorite movies\");\n        }\n        const userdata = await response.json();\n        setFavoriteMovies(userdata.favoriteMovies || []);\n      } catch (error) {\n        console.error(\"Error fetching favorite movies:\", error);\n      }\n    };\n\n    fetchFavoriteMovies();\n  }, [user, token]);\n\n  useEffect(() => {\n    if (user && user.favoriteMovies) {\n      setFavoriteMovies(user.favoriteMovies);\n    }\n  }, [user]);\n\n  if (\n    !movies ||\n    !user ||\n    !Array.isArray(movies) ||\n    !Array.isArray(favoriteMovies)\n  ) {\n    return <div>No favorite movies available</div>;\n  }\n\n  const filteredMovies = movies.filter((movie) =>\n    favoriteMovies.includes(movie._id)\n  );\n\n  const handleMovieClick = (movie) => {\n    console.log(\"Clicked Movie: \", movie);\n  };\n\n  const onFavoriteClick = (movieId, isFavorite) => {\n    if (isFavorite) {\n      onRemoveFromFavorites(movieId);\n    } else {\n      onAddToFavorites(movieId);\n    }\n  };\n\n  return (\n    <Container className=\"favorite-movies\">\n      <Row>\n        {filteredMovies.length > 0 ? (\n          <div className=\"card-container\">\n            {filteredMovies.map((movie) => (\n              <Col key={movie._id} xs={12} sm={6} md={4} lg={3}>\n                <MovieCard\n                  movie={movie}\n                  fav={true}\n                  onMovieClick={() => handleMovieClick(movie)}\n                  onFavoriteClick={() => onFavoriteClick(movie._id, true)}\n                  onAddToFavorites={() => onAddToFavorites(movie._id)}\n                  onRemoveFromFavorites={() => onRemoveFromFavorites(movie._id)}\n                />\n              </Col>\n            ))}\n          </div>\n        ) : (\n          <Col>\n            <Card>\n              <Card.Body>No favorite movies yet!</Card.Body>\n            </Card>\n          </Col>\n        )}\n      </Row>\n    </Container>\n  );\n};","import React from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport UpdateUser from \"./update-user\";\nimport { UserInfo } from \"./user-info\";\nimport { FavoriteMovies } from \"./favorite-movies\";\nimport \"./profile-view.scss\";\n\nexport const ProfileView = ({\n  user,\n  movies = [], // Default to an empty array if movies is not provided\n  setUser,\n  onAddToFavorites,\n  onRemoveFromFavorites,\n}) => {\n  const token = localStorage.getItem(\"token\");\n\n  const handleUpdate = (updatedUser) => {\n    setUser(updatedUser);\n    console.log(\"Updated User: \", updatedUser);\n  };\n\n  const handleDeregisterUser = async () => {\n    try {\n      const response = await fetch(\n        `https://mymoviesdb-6c5720b5bef1.herokuapp.com/users/${user.username}`,\n        {\n          method: \"DELETE\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Failed to deregister user\");\n      }\n\n      alert(\"User deregistered successfully!\");\n      setUser(null);\n      localStorage.removeItem(\"user\");\n      localStorage.removeItem(\"token\");\n    } catch (error) {\n      console.error(\"Error deregistering user: \", error);\n      alert(\"Failed to deregister user. Please try again.\");\n    }\n  };\n\n  const handleAddToFavorites = async (movieId) => {\n    try {\n      const response = await fetch(\n        `https://mymoviesdb-6c5720b5bef1.herokuapp.com/users/${user.username}/movies/${movieId}`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Failed to add movie to favorites.\");\n      }\n\n      const updatedUser = await response.json();\n      alert(\"Movie added to Favorites!\");\n      setUser(updatedUser);\n      localStorage.setItem(\"user\", JSON.stringify(updatedUser));\n    } catch (error) {\n      console.error(\"Error adding to favorites: \", error);\n    }\n  };\n\n  const handleRemoveFromFavorites = async (movieId) => {\n    try {\n      const response = await fetch(\n        `https://mymoviesdb-6c5720b5bef1.herokuapp.com/users/${user.username}/movies/${movieId}`,\n        {\n          method: \"DELETE\",\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Failed to remove movie from favorites.\");\n      }\n\n      const updatedUser = await response.json();\n      setUser(updatedUser);\n      localStorage.setItem(\"user\", JSON.stringify(updatedUser));\n      alert(\"Movie was successfully removed from favorites.\");\n    } catch (error) {\n      console.error(\"Error removing from favorites: \", error);\n      alert(\"Failed to remove movie from favorites. Please try again.\");\n    }\n  };\n\n  if (!user) {\n    return <div>User data not available</div>;\n  }\n\n  // Safeguard against cases where user.favoriteMovies might be undefined\n  const favoriteMovies = user.favoriteMovies && Array.isArray(user.favoriteMovies)\n    ? movies.filter((movie) => user.favoriteMovies.includes(movie._id))\n    : [];\n\n  return (\n    <Container className=\"profile-view-container\">\n      <Row>\n        <Col xs={12} sm={6}>\n          <div>\n            <UserInfo\n              username={user.username}\n              email={user.email}\n              birthdate={user.birthdate}\n            />\n          </div>\n          <div className=\"user-update\">\n            <UpdateUser user={user} onUserUpdate={handleUpdate} />\n          </div>\n        </Col>\n        <Col xs={12} sm={6}>\n          <div className=\"favorite-movies\">\n            <h3 className=\"header\">Favorite Movies</h3>\n            <div className=\"card-container\">\n              {favoriteMovies.length > 0 ? (\n                <FavoriteMovies\n                  movies={favoriteMovies}\n                  user={user}\n                  onAddToFavorites={handleAddToFavorites}\n                  onRemoveFromFavorites={handleRemoveFromFavorites}\n                />\n              ) : (\n                <Col>\n                  <div>No favorite movies yet!</div>\n                </Col>\n              )}\n            </div>\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n};","import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Form } from \"react-bootstrap\";\nimport MovieCard from \"../movie-card/movie-card\";\nimport { MovieView } from \"../movie-view/movie-view\";\nimport { LoginView } from \"../login-view/login-view\";\nimport { NavigationBar } from \"../navigation-bar/navigation-bar\";\nimport { ProfileView } from \"../profile-view/profile-view\";\nimport { BrowserRouter, Routes, Route, Navigate } from \"react-router-dom\";\nimport { FavoriteMovies } from \"../profile-view/favorite-movies\";\nimport \"./main-view.scss\";\nimport \"../movie-card/movie-card.scss\";\n\n// FUNCTION TO CALCULATE STRING SIMILARITY USING THE LEVENSHTEIN DISTANCE\nconst getSimilarity = (a, b) => {\n  const matrix = Array.from({ length: a.length + 1 }, () =>\n    Array(b.length + 1).fill(0)\n  );\n  for (let i = 0; i <= a.length; i++) matrix[i][0] = i;\n  for (let j = 0; j <= b.length; j++) matrix[0][j] = j;\n\n  for (let i = 1; i <= a.length; i++) {\n    for (let j = 1; j <= b.length; j++) {\n      matrix[i][j] =\n        a[i - 1] === b[j - 1]\n          ? matrix[i - 1][j - 1]\n          : Math.min(\n              matrix[i - 1][j - 1] + 1,\n              matrix[i][j - 1] + 1,\n              matrix[i - 1][j] + 1\n            );\n    }\n  }\n  return 1 - matrix[a.length][b.length] / Math.max(a.length, b.length);\n};\n\n// FUNCTION TO REMOVE DUPLICATE DIRECTORS\nconst getUniqueDirectors = (directors) => {\n  const seen = new Set();\n  return directors.filter((director) => {\n    const isDuplicate = seen.has(director.name);\n    seen.add(director.name);\n    return !isDuplicate;\n  });\n};\n\nexport const MainView = () => {\n  let storedUser = null;\n  const storedToken = localStorage.getItem(\"token\");\n\n  const [user, setUser] = useState(storedUser || null);\n  const [token, setToken] = useState(storedToken || null);\n  const [movies, setMovies] = useState([]);\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [suggestions, setSuggestions] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState(\"\");\n  const [selectedDirector, setSelectedDirector] = useState(\"\");\n  const [genres, setGenres] = useState([]);\n  const [directors, setDirectors] = useState([]);\n\n  useEffect(() => {\n    if (!token) {\n      return;\n    }\n    fetch(\"https://mymoviesdb-6c5720b5bef1.herokuapp.com/movies\", {\n      headers: { Authorization: `Bearer ${token}` },\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch movies.\");\n        }\n        return response.json();\n      })\n      .then((movies) => {\n        console.log(\"Movies fetched successfully: \", movies);\n        setMovies(movies);\n\n        // Set genres and directors\n        const uniqueGenres = Array.from(\n          new Set(movies.map((movie) => movie.genre.name))\n        );\n        setGenres(uniqueGenres);\n\n        const allDirectors = movies.map((movie) => movie.director);\n        const uniqueDirectors = getUniqueDirectors(allDirectors);\n        setDirectors(uniqueDirectors);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching movies: \", error);\n      });\n  }, [token]);\n\n  useEffect(() => {\n    if (searchQuery === \"\") {\n      setSuggestions([]);\n      return;\n    }\n\n    const lowerSearchQuery = searchQuery.toLowerCase();\n    const filteredSuggestions = movies\n      .map((movie) => ({\n        ...movie,\n        similarity: getSimilarity(movie.title.toLowerCase(), lowerSearchQuery),\n      }))\n      .filter((movie) => movie.similarity > 0.3)\n      .sort((a, b) => b.similarity - a.similarity);\n\n    setSuggestions(filteredSuggestions);\n  }, [searchQuery, movies]);\n\n  const handleBackClick = () => {\n    setSelectedMovie(null);\n  };\n\n  const handleAddToFavorites = (movieId) => {\n    fetch(\n      `https://mymoviesdb-6c5720b5bef1.herokuapp.com/users/${user.username}/movies/${movieId}`,\n      {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    )\n      .then((response) => response.json())\n      .then((updatedUser) => {\n        alert(\"Movie added to Favorites!\");\n        setUser(updatedUser);\n        localStorage.setItem(\"user\", JSON.stringify(updatedUser));\n        setMovies((prevMovies) =>\n          prevMovies.map((movie) =>\n            movie._id === movieId ? { ...movie, isFavorite: true } : movie\n          )\n        );\n      })\n      .catch((error) => {\n        console.error(\"Error adding to favorites: \", error);\n      });\n  };\n\n  const handleRemoveFromFavorites = (movieId) => {\n    fetch(\n      `https://mymoviesdb-6c5720b5bef1.herokuapp.com/users/${user.username}/movies/${movieId}`,\n      {\n        method: \"DELETE\",\n        headers: { Authorization: `Bearer ${token}` },\n      }\n    )\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"Failed to remove movie from favorites.\");\n        }\n        return response.json();\n      })\n      .then((updatedUser) => {\n        console.log(\"Success: \", updatedUser);\n        alert(\"Movie was successfully removed from list.\");\n        setUser(updatedUser);\n        localStorage.setItem(\"user\", JSON.stringify(updatedUser));\n        setMovies((prevMovies) =>\n          prevMovies.map((movie) =>\n            movie._id === movieId ? { ...movie, isFavorite: false } : movie\n          )\n        );\n      })\n      .catch((error) => {\n        console.error(\"Error removing from favorites: \", error);\n      });\n  };\n\n  const updateUser = (user) => {\n    setUser(user);\n    localStorage.setItem(\"user\", JSON.stringify(user));\n  };\n\n  if (!user) {\n    return (\n      <Row className=\"justify-content-md-center\">\n        <Col md={5}>\n          <LoginView\n            onLoggedIn={(user, token) => {\n              setUser(user);\n              setToken(token);\n              localStorage.setItem(\"user\", JSON.stringify(user));\n              localStorage.setItem(\"token\", token);\n            }}\n          />\n        </Col>\n      </Row>\n    );\n  }\n\n  const filteredMovies = movies\n    .filter((movie) => !user.favoriteMovies.includes(movie._id))\n    .filter((movie) =>\n      selectedGenre\n        ? movie.genre.name.toLowerCase().includes(selectedGenre.toLowerCase())\n        : true\n    )\n    .filter((movie) =>\n      selectedDirector\n        ? movie.director.name\n            .toLowerCase()\n            .includes(selectedDirector.toLowerCase())\n        : true\n    );\n\n  const searchFilteredMovies = filteredMovies\n    .filter((movie) =>\n      selectedGenre\n        ? movie.genre.name.toLowerCase().includes(selectedGenre.toLowerCase())\n        : true\n    )\n    .filter((movie) =>\n      selectedDirector\n        ? movie.director.name\n            .toLowerCase()\n            .includes(selectedDirector.toLowerCase())\n        : true\n    )\n    .filter((movie) =>\n      movie.title.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n\n    return (\n        <BrowserRouter>\n          <NavigationBar\n            user={user}\n            onLoggedOut={() => {\n              setUser(null);\n              setToken(null);\n              localStorage.removeItem(\"user\");\n              localStorage.removeItem(\"token\");\n            }}\n          />\n          <Row className=\"justify-content-md-center\">\n            <Routes>\n              <Route\n                path=\"/login\"\n                element={\n                  <>\n                    {user ? (\n                      <Navigate to=\"/\" />\n                    ) : (\n                      <Col md={5}>\n                        <LoginView\n                          onLoggedIn={(user, token) => {\n                            setUser(user);\n                            setToken(token);\n                            localStorage.setItem(\"user\", JSON.stringify(user));\n                            localStorage.setItem(\"token\", token);\n                          }}\n                        />\n                      </Col>\n                    )}\n                  </>\n                }\n              />\n              <Route\n                path=\"/movies/:movieId\"\n                element={\n                  !user ? (\n                    <Navigate to=\"/login\" replace />\n                  ) : movies.length === 0 ? (\n                    <Col>The list is empty!</Col>\n                  ) : (\n                    <Col md={8} style={{ border: \"1px solid black\" }}>\n                      {selectedMovie ? (\n                        <MovieView\n                          movies={movies}\n                          movie={selectedMovie}\n                          onBackClick={handleBackClick}\n                          onAddToFavorites={handleAddToFavorites}\n                          onRemoveFromFavorites={handleRemoveFromFavorites}\n                          isFavorite={user.favoriteMovies.includes(selectedMovie._id)}\n                        />\n                      ) : (\n                        <Navigate to=\"/\" replace />\n                      )}\n                    </Col>\n                  )\n                }\n              />\n              <Route\n                path=\"/favorites\"\n                element={\n                  !user ? (\n                    <Navigate to=\"/login\" replace />\n                  ) : (\n                    <FavoriteMovies\n                      movies={movies}\n                      user={user}\n                      onAddToFavorites={handleAddToFavorites}\n                      onRemoveFromFavorites={handleRemoveFromFavorites}\n                      onMovieClick={(movie) => setSelectedMovie(movie)}\n                    />\n                  )\n                }\n              />\n              <Route\n                path=\"/\"\n                element={\n                  <>\n                    {!user ? (\n                      <Navigate to=\"/login\" replace />\n                    ) : (\n                      <>\n                        <Col md={12} className=\"mb-4\">\n                          <input\n                            type=\"text\"\n                            placeholder=\"Search for a movie...\"\n                            value={searchQuery}\n                            onChange={(e) => setSearchQuery(e.target.value)}\n                            className=\"search-input\"\n                          />\n                        </Col>\n                        <Col md={12} className=\"filter-container\">\n                          <div className=\"filter-group\">\n                            <Form>\n                              <Form.Group controlId=\"genreFilter\">\n                                <Form.Label>Filter by Genre:</Form.Label>\n                                <Form.Control\n                                  as=\"select\"\n                                  value={selectedGenre}\n                                  onChange={(e) => setSelectedGenre(e.target.value)}\n                                >\n                                  <option value=\"\">Select Genre</option>\n                                  {genres.map((genre, index) => (\n                                    <option key={index} value={genre}>\n                                      {genre}\n                                    </option>\n                                  ))}\n                                </Form.Control>\n                              </Form.Group>\n                            </Form>\n                          </div>\n                          <div className=\"filter-group\">\n                            <Form>\n                              <Form.Group controlId=\"directorFilter\">\n                                <Form.Label>Filter by Director:</Form.Label>\n                                <Form.Control\n                                  as=\"select\"\n                                  value={selectedDirector}\n                                  onChange={(e) => setSelectedDirector(e.target.value)}\n                                >\n                                  <option value=\"\">Select Director</option>\n                                  {directors.map((director, index) => (\n                                    <option key={index} value={director.name}>\n                                      {director.name}\n                                    </option>\n                                  ))}\n                                </Form.Control>\n                              </Form.Group>\n                            </Form>\n                          </div>\n                        </Col>\n                        <Row className=\"card-container\">\n                          {searchFilteredMovies.length === 0 && suggestions.length === 0 ? (\n                            <Col className=\"text-center\">\n                              The list is empty or no matching movies found.\n                            </Col>\n                          ) : searchFilteredMovies.length === 0 ? (\n                            <Col className=\"text-center\">\n                              No matching movies found. Try another search or check these suggestions:\n                              <div>\n                                {suggestions.map((movie) => (\n                                  <div key={movie._id}>{movie.title}</div>\n                                ))}\n                              </div>\n                            </Col>\n                          ) : (\n                            searchFilteredMovies.map((movie) => (\n                              <Col className=\"mb-5\" key={movie._id} md={3}>\n                                <MovieCard\n                                  movie={movie}\n                                  fav={(user.favoriteMovies || []).includes(movie._id)}\n                                  onAddToFavorites={() => handleAddToFavorites(movie._id)}\n                                  onRemoveFromFavorites={() => handleRemoveFromFavorites(movie._id)}\n                                  onMovieClick={() => setSelectedMovie(movie)}\n                                />\n                              </Col>\n                            ))\n                          )}\n                        </Row>\n                      </>\n                    )}\n                  </>\n                }\n              />\n              <Route\n                path=\"/profile\"\n                element={\n                  !user ? (\n                    <Navigate to=\"/login\" replace />\n                  ) : (\n                    <ProfileView\n                      user={user}\n                      movies={movies}\n                      setUser={updateUser}\n                      onRemoveFromFavorites={handleRemoveFromFavorites}\n                    />\n                  )\n                }\n              />\n            </Routes>\n          </Row>\n        </BrowserRouter>\n      );\n    }","import { createRoot } from \"react-dom/client\";\nimport { MainView } from \"./components/main-view/main-view\";\nimport Container from \"react-bootstrap/Container\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./index.scss\";\n\nconst App = () => {\n  return (\n    <Container>\n      <MainView />\n    </Container>\n  );\n};\n\nconst container = document.querySelector(\"#root\");\nconst root = createRoot(container);\nroot.render(<App />);\n"],"sourceRoot":""}